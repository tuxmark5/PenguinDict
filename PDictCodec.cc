#include <PDictCodec.hh>

/**********************************************************************************************/

ushort g_windows1257[] =
{
  0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, // 00
  0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F, // 08
  0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, // 10
  0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F, // 18
  0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, // 20
  0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F, // 28
  0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, // 30
  0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F, // 38
  0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, // 40
  0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F, // 48
  0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, // 50
  0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F, // 58
  0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, // 60
  0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F, // 68
  0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, // 70
  0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F, // 78
  0x20AC, 0xFFFD, 0x201A, 0xFFFD, 0x201E, 0x2026, 0x2020, 0x2021, // 80
  0xFFFD, 0x2030, 0xFFFD, 0x2039, 0xFFFD, 0x00A8, 0x02C7, 0x00B8, // 88
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014, // 90
  0xFFFD, 0x2122, 0xFFFD, 0x203A, 0xFFFD, 0x00AF, 0x02DB, 0xFFFD, // 98
  0x00A0, 0xFFFD, 0x00A2, 0x00A3, 0x00A4, 0xFFFD, 0x00A6, 0x00A7, // a0
  0x00D8, 0x00A9, 0x0156, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00C6, // a8
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7, // b0
  0x00F8, 0x00B9, 0x0157, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00E6, // b8
  0x0104, 0x012E, 0x0100, 0x0106, 0x00C4, 0x00C5, 0x0118, 0x0112, // c0
  0x010C, 0x00C9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012A, 0x013B, // c8
  0x0160, 0x0143, 0x0145, 0x00D3, 0x014C, 0x00D5, 0x00D6, 0x00D7, // d0
  0x0172, 0x0141, 0x015A, 0x016A, 0x00DC, 0x017B, 0x017D, 0x00DF, // d8
  0x0105, 0x012F, 0x0101, 0x0107, 0x00E4, 0x00E5, 0x0119, 0x0113, // e0
  0x010D, 0x00E9, 0x017A, 0x0117, 0x0123, 0x0137, 0x012B, 0x013C, // e8
  0x0161, 0x0144, 0x0146, 0x00F3, 0x014D, 0x00F5, 0x00F6, 0x00F7, // f0
  0x0173, 0x0142, 0x015B, 0x016B, 0x00FC, 0x017C, 0x017E, 0x02D9, // f8
};

/********************************************* TX *********************************************/
/*                                         PDictCodec                                         */
/**********************************************************************************************/

PDictCodec :: PDictCodec()
{
  for (int i = 0; i < 256; i++)
    m_unicodeTable[i] = QChar(g_windows1257[i]);

  //for (int i = 0x80; i < 0x100; i++)
  //  m_unicodeTable[i] = 'Z';//QChar(g_windows1257[i]);



  m_unicodeTable[0x83] = QChar(0x0254);
  m_unicodeTable[0x85] = QChar(0x0259); // 0x0259
  m_unicodeTable[0x86] = QChar(0x025C);
  m_unicodeTable[0x88] = QChar(0x026A);
  m_unicodeTable[0x87] = QChar('g');
  m_unicodeTable[0x89] = QChar(0x014B);
  m_unicodeTable[0x8A] = QChar(0x03B8);
  m_unicodeTable[0x8B] = QChar(0x02C8);
  m_unicodeTable[0x8C] = QChar(0x0283);
  m_unicodeTable[0x99] = QChar(0x028C);
  m_unicodeTable[0x9A] = QChar(0x0292);
  m_unicodeTable[0x9B] = QChar(0x02CC);
  m_unicodeTable[0x9C] = QChar(0x00E6);
  m_unicodeTable[0x9F] = QChar(0x00F0);

  m_unicodeTable[0xAB] = QChar(0x2605);
  m_unicodeTable[0xB6] = QChar(0x2606);
}

/**********************************************************************************************/

QList<QByteArray> PDictCodec :: aliases() const
{
  return m_aliases;
}

/**********************************************************************************************/

QByteArray PDictCodec :: convertFromUnicode(const QChar* input, int number, ConverterState* state) const
{
  return QByteArray();
}

/**********************************************************************************************/

QString PDictCodec :: convertToUnicode(const char* chars, int len, ConverterState* state) const
{
  QString str;

  str.reserve(len);
  for (; len > 0; chars++, len--)
  {
    str.append(m_unicodeTable[*chars & 0xFF]);
    //if (m_unicodeTable[*chars & 0xFF] == 'Z')
    //  qDebug() << (void*) *chars;
  }

  return str;
}

/**********************************************************************************************/

int PDictCodec :: mibEnum() const
{
  return 0x8086;
}

/**********************************************************************************************/

QByteArray PDictCodec :: name() const
{
  return "penguin-5";
}

/**********************************************************************************************/
